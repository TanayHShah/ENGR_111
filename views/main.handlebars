<div class="alert hide">
    <span class="fas fa-exclamation-circle"></span>
    <span class="msg" id="error-message"></span>
</div>
<div class="aParent">
    <div>
        <form id="msform" class="display-form">

            <!-- fieldsets -->
            <fieldset>
                <h2 class="fs-title">Enter Topic</h2>
                <input type="text" name="topic" id="topic_name" class="stop-fetch" placeholder="Topic" />
                <input type="submit" name="next" class="action-button" value="Show Data" />
            </fieldset>

        </form>
    </div>
    <div>
        <form id="download" class="display-form">

            <!-- fieldsets -->
            <fieldset>
                <h2 class="fs-title">Select Date to Download</h2>
                <input type="text" name="daterange" id="daterange_name" />
                <input type="submit" name="next" class="action-button" value="Download" />
            </fieldset>

        </form>
    </div>
</div>
<div class="cards" id="display-div" style="display: none;">
    <div class="aParent">
        <div class="display-form">
            <fieldset class="display-form">
                <table id="add_data">
                    <tbody></tbody>
                </table>
            </fieldset>
        </div>
        <div class="canvas-container">
            <canvas id="line-chart"></canvas>
        </div>
    </div>
</div>

<script type="text/javascript">
    jQuery('#topic_name').on('input', function () {
        jQuery("#display-div").hide();
        jQuery("#topic_name").addClass("stop-fetch");
    });
    jQuery(document).ready(function () {
        setInterval(function () {
            if (!jQuery("#topic_name").hasClass('stop-fetch')) {
                sendAjaxRequest($('#topic_name').val())
            }
        }, 30000);

        $('input[name="daterange"]').daterangepicker();
        jQuery("#msform").validate({
            ignore: [],
            rules: {
                topic: {
                    required: true,
                },
            }
        })

        jQuery("#display-form").validate({
            ignore: [],
            rules: {
                topic: {
                    daterange: true,
                },
            }
        })



        const form = document.getElementById('msform');
        const display_form = document.getElementById('download');
        display_form.addEventListener('submit', function (event) {
            const label = document.querySelector('label[for="daterange_name"]');

            // Wait for 5 seconds before removing the label
            if (label) {
                setTimeout(function () {
                    label.style.display = "none";
                }, 5000);
            }
            const $form = jQuery("#download");
            const result = $form.valid()
            const topicResult = $("#msform").valid();
            event.preventDefault(); // Prevent the default form submission
            if (result && topicResult) {
                sendDownloadAjaxRequest($("#daterange_name").val(), $('#topic_name').val())
            }
        });

        form.addEventListener('submit', function (event) {
            const label = document.querySelector('label[for="topic_name"]');

            // Wait for 5 seconds before removing the label
            if (label) {
                setTimeout(function () {
                    label.style.display = "none";
                }, 5000);
            }
            const $form = jQuery("#msform");
            const result = $form.valid()
            event.preventDefault(); // Prevent the default form submission
            if (result) {
                sendAjaxRequest($("#topic_name").val())
            }
        });

    })

    function sendAjaxRequest(topicName) {
        jQuery.ajax({
            url: '/topic',
            type: 'POST',
            data: { topic: topicName }
        }).done(response => {
            if (response.data && Object.keys(response.data).length != 0) {
                jQuery("#display-div").show();
                jQuery("#topic_name").removeClass("stop-fetch");
                var dataList = document.getElementById('add_data');
                jQuery("#add_data tbody").html('');
                var newRow = $("<tr>");
                var cols = "";
                cols += '<th class="table_text">TIMESTAMP</th>';
                cols += '<th class="table_text">PAYLOAD</th>';
                newRow.append(cols);
                $("#add_data tbody").append(newRow);
                let dateArray = [];
                let dataArray = [];
                let i = 0;
                response.data.forEach(function (item) {
                    var newRow = $("<tr>");
                    var cols = "";
                    cols += '<td class="table_text">' + item.timestamp + '</td>';
                    cols += '<td class="table_text">' + item.payload + '</td>';
                    if (i % 2 === 0) {
                        dateArray.push(item.timestamp);
                    } else {
                        dateArray.push('')
                    }
                    dataArray.push(item.payload);
                    newRow.append(cols);
                    $("#add_data tbody").append(newRow);
                    i++;

                });
                var existingChart = Chart.getChart("line-chart");


                if (existingChart) {
                    // Update the existing chart with new data
                    existingChart.data.labels = dateArray;
                    existingChart.data.datasets[0].label = topicName;
                    existingChart.data.datasets[0].data = dataArray;
                    existingChart.update();
                 
                } else {
                    new Chart(document.getElementById("line-chart"), {
                        type: 'line',
                        data: {
                            labels: dateArray,
                            datasets: [
                                {
                                    data: dataArray,
                                    label: topicName,
                                    borderColor: "#3cba9f",
                                    fill: false
                                }]
                        },
                        options: {
                            legend: {
                                display: false  // Set this to hide the legend
                            }
                        }

                    });
                }
            }
        }).fail(function (xhr, textStatus, errorThrown) {
            jQuery("#display-div").hide();
            jQuery("#topic_name").addClass("stop-fetch");
            jQuery("#add_data tbody").html('');
        });
    }


    function sendDownloadAjaxRequest(dateRangeName, topicName) {
        jQuery.ajax({
            url: '/daterange',
            type: 'POST',
            data: { dateRange: dateRangeName, topic: topicName }
        }).done(response => {

            if (response.status == 200) {
                const fileContent = formatAsTable(response.file, topicName, dateRangeName);

                // Create a Blob from the file content
                const blob = new Blob([fileContent], { type: 'text/plain' });

                // Create a URL for the Blob
                const blobUrl = URL.createObjectURL(blob);

                // Create a link element to trigger the download
                const downloadLink = document.createElement('a');
                downloadLink.href = blobUrl;
                downloadLink.download = topicName + '-' + dateRangeName + '.txt'; // Specify the desired filename

                // Simulate a click to trigger the download
                downloadLink.click();

                // Clean up by revoking the Blob URL (to release resources)
                URL.revokeObjectURL(blobUrl);
            }
            else {
                jQuery("#error-message").html(response.message)
                $('.alert').addClass("show");
                $('.alert').removeClass("hide");
                $('.alert').addClass("showAlert");
                setTimeout(function () {
                    $('.alert').removeClass("show");
                    $('.alert').addClass("hide");
                }, 5000);

                $('.close-btn').click(function () {
                    $('.alert').removeClass("show");
                    $('.alert').addClass("hide");
                });
            }

        }).fail(function (xhr, textStatus, errorThrown) {
            jQuery("#error-message").html(errorThrown)
            $('.alert').addClass("show");
            $('.alert').removeClass("hide");
            $('.alert').addClass("showAlert");
            setTimeout(function () {
                $('.alert').removeClass("show");
                $('.alert').addClass("hide");
            }, 5000);

            $('.close-btn').click(function () {
                $('.alert').removeClass("show");
                $('.alert').addClass("hide");
            });
        });
    }

    function formatAsTable(data, topicName, dateRange) {
        // Find the maximum width of each column
        const columnWidths = {};
        for (const entry of data) {
            for (const key in entry) {
                const value = entry[key].toString();
                if (!columnWidths[key] || value.length > columnWidths[key]) {
                    columnWidths[key] = value.length;
                }
            }
        }

        // Generate the table header
        const header = Object.keys(data[0])
            .map(key => key.padEnd(columnWidths[key]))
            .join(' | ');

        // Generate the table content
        const content = data
            .map(entry => Object.values(entry)
                .map(value => value.toString().padEnd(columnWidths[Object.keys(entry)[Object.values(entry).indexOf(value)]]))
                .join(' | '))
            .join('\n');

        return `Topic: ${topicName}\nDate Range:${dateRange}\n\n${header}\n${'-'.repeat(header.length)}\n${content}`;
    }


</script>